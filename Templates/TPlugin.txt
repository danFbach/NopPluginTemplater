using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Mvc.Routing;
using Nop.Services.Plugins;
using Nop.Services.Configuration;
using Nop.Services.Localization;
{PluginUsings}

namespace {namespace}
{
	public class {PluginName}Plugin : BasePlugin, {PluginTypes}
	{

		#region Fields

		private readonly {PluginName}Settings _{PluginNameCamel}Settings;
        private readonly ISettingService _settingService;
        private readonly ILocalizationService _localizationService;
        private readonly IUrlHelperFactory _urlHelperFactory;
        private readonly IActionContextAccessor _actionContextAccessor;
        {PluginFields}
		#endregion

		#region Ctor

		public {PluginName}Plugin({PluginName}Settings {PluginNameCamel}Settings,
            ISettingService settingService,
            ILocalizationService localizationService,
            IUrlHelperFactory urlHelperFactory,
            IActionContextAccessor actionContextAccessor{PluginServiceDI})
		{
			_{PluginNameCamel}Settings = {PluginNameCamel}Settings;
            _settingService = settingService;
            _localizationService = localizationService;
            _urlHelperFactory = urlHelperFactory;
            _actionContextAccessor = actionContextAccessor;
            {PluginServiceRegistation}
		}

		#endregion
{WidgetImplementation}
		#region Methods
		
{PluginImplementation}

        /// <summary>
        /// Gets a configuration page URL
        /// </summary>
        public override string GetConfigurationPageUrl()
        {
            return _urlHelperFactory.GetUrlHelper(_actionContextAccessor.ActionContext).RouteUrl({PluginName}Defaults.ConfigurationRouteName);
        }

        /// <summary>
        /// Install the plugin
        /// </summary>
        /// <returns>A task that represents the asynchronous operation</returns>
        public override async Task InstallAsync()
        {
		
            await _settingService.SaveSettingAsync(new {PluginName}Settings());

			await _localizationService.AddOrUpdateLocaleResourceAsync({PluginName}Defaults.Resources);

			await base.InstallAsync();
		}
		
        /// <summary>
        /// Uninstall the plugin
        /// </summary>
        /// <returns>A task that represents the asynchronous operation</returns>
        public override async Task UninstallAsync()
        {
            await base.UninstallAsync();
        }

		#endregion
	}
}